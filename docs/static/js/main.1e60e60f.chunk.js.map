{"version":3,"sources":["logo-mini.svg","logo.png","Simon.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","SimonGame","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","blinkingColor","_blinkGreen","Subject","_blinkRed","_blinkYellow","_blinkBlue","_endPlay","_nextRound","_sequence","_playSequence","modalStyles","content","top","left","right","bottom","marginRight","transform","state","playing","level","best","showModal","_howl","Howl","src","sprite","green","red","yellow","blue","onend","next","onload","pipe","throttleTime","subscribe","isClick","handleBlink","toggleBlinking","onloaderror","endGame","bind","assertThisInitialized","array","_this2","sequence","length","interval","take","map","index","color","_this3","console","log","playSequence","every","playedColor","i","openModal","play","concat","toConsumableArray","name","document","getElementById","classList","toggle","_this4","computeSequence","setState","objectSpread","isStopped","unsubscribe","newColor","Math","floor","random","_this5","react_default","a","createElement","id","className","onClick","clickGreen","clickRed","clickYellow","clickBlue","resetGame","startGame","disabled","lib_default","ariaHideApp","isOpen","onAfterOpen","afterOpenModal","onRequestClose","closeModal","style","contentLabel","React","Component","Header","target","rel","href","width","height","alt","data-recalc-dims","headerLogo","maxWidth","maxHeight","margin","Footer","logoMini","SimonInstructions","App","Simon_SimonGame","Boolean","window","location","hostname","match","ReactDOM","render","src_App","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.1e60e60f.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo-mini.44183143.svg\";","module.exports = __webpack_public_path__ + \"static/media/logo.bad82e98.png\";","import \"./Simon.css\";\r\n\r\nimport { Howl } from \"howler\";\r\nimport React from \"react\";\r\nimport Modal from \"react-modal\";\r\nimport { interval, Subject } from \"rxjs\";\r\nimport { map, take, throttleTime } from \"rxjs/operators\";\r\n\r\n/**\r\n * Main class including all the logic of the game\r\n */\r\nexport default class SimonGame extends React.Component {\r\n  /**\r\n   * @property blinkingColor\r\n   * holds the color of the blinking color\r\n   */\r\n  blinkingColor = \"\";\r\n\r\n  /**\r\n   * @property \\_blinkGreen\r\n   * Subject that emits value when the green light must blink\r\n   */\r\n  _blinkGreen = new Subject();\r\n  /**\r\n   * @property \\_blinkRed\r\n   * Subject that emits value when the red light must blink\r\n   */\r\n  _blinkRed = new Subject();\r\n  /**\r\n   * @property \\_blinkYellow\r\n   * Subject that emits value when the yellow light must blink\r\n   */\r\n  _blinkYellow = new Subject();\r\n  /**\r\n   * @property \\_blinkBlue\r\n   * Subject that emits value when the blue light must blink\r\n   */\r\n  _blinkBlue = new Subject();\r\n  /**\r\n   * @property \\_endPlay\r\n   * Subject that emits value when howler has finished emitting sound\r\n   */\r\n  _endPlay = new Subject();\r\n  /**\r\n   * @property \\_nextRound\r\n   * Subject that emits value when the user succeeds to the next round\r\n   */\r\n  _nextRound = new Subject();\r\n  /**\r\n   * @property \\_howl\r\n   * property holding the Howler.js object (see http://howlerjs.com/docs for more info )\r\n   */\r\n  _howl;\r\n  /**\r\n   * @property \\_sequence\r\n   * array containing the sequence computed by Simon to be played.\r\n   *  Do not reach directly, use _sequence()_ getter and setter\r\n   */\r\n  _sequence = [];\r\n  /**\r\n   * @getter sequence()\r\n   * returns _sequence property. Use the getter instead of direct access of private component\r\n   */\r\n  get sequence() {\r\n    return this._sequence;\r\n  }\r\n  /**\r\n   * @setter sequence()\r\n   * sets _sequence property and emits values to make Simon blink. Use the setter instead of direct access of private component\r\n   */\r\n  set sequence(array) {\r\n    this._sequence = array;\r\n    // if the sequence is not empty, play it\r\n    if (this.sequence.length) {\r\n      // emit an observable every 1000 milliseconds\r\n      interval(1000)\r\n        .pipe(\r\n          // take only the length of the sequence to be played\r\n          take(this.sequence.length),\r\n          // get the name of the color to be played\r\n          map(index => this.sequence[index])\r\n        )\r\n        .subscribe(color => {\r\n          //emits value on the right subject. emits false to indicate that it's not the player who clicked the frame.\r\n          switch (color) {\r\n            case \"green\":\r\n              this._blinkGreen.next(false);\r\n              break;\r\n            case \"red\":\r\n              this._blinkRed.next(false);\r\n              break;\r\n            case \"yellow\":\r\n              this._blinkYellow.next(false);\r\n              break;\r\n            case \"blue\":\r\n              this._blinkBlue.next(false);\r\n              break;\r\n            default:\r\n              break;\r\n          }\r\n        });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @propery \\_playSequence\r\n   * array containing the sequence played by the player.\r\n   * _Do not access it directly, please use playSequence() getter and setter to respect logic._\r\n   */\r\n  _playSequence = [];\r\n  /**\r\n   * @getter playSequence\r\n   * returns the _\\_playSequence_ property.\r\n   */\r\n  get playSequence() {\r\n    return this._playSequence;\r\n  }\r\n  /**\r\n   * @setter playSequence\r\n   * set the sequence played by the user, and check for errors.\r\n   * If the user missed, opens the modal which finishes the game.\r\n   * If the played sequence matches the sequence computed by simon,\r\n   * emits value to go the next round.\r\n   */\r\n  set playSequence(array) {\r\n    this._playSequence = array;\r\n    if (this.state.playing && array.length) {\r\n      console.log(\"sequence played\", this.playSequence);\r\n      const goodSoFar = this._playSequence.every(\r\n        (playedColor, i) => this.sequence[i] === playedColor\r\n      );\r\n      if (!goodSoFar) {\r\n        this.openModal();\r\n      } else {\r\n        if (this.playSequence.length === this.sequence.length) {\r\n          this._nextRound.next(this.state.level + 1);\r\n        }\r\n      }\r\n    }\r\n  }\r\n  /**\r\n   * Injected styles for modal end game window\r\n   */\r\n  modalStyles = {\r\n    content: {\r\n      top: \"50%\",\r\n      left: \"50%\",\r\n      right: \"auto\",\r\n      bottom: \"auto\",\r\n      marginRight: \"-50%\",\r\n      transform: \"translate(-50%, -50%)\"\r\n    }\r\n  };\r\n\r\n  /**\r\n   * React Ctor\r\n   * @param {} props props injected (none)\r\n   */\r\n  constructor(props) {\r\n    //call parent constructor\r\n    super(props);\r\n    //initiate local state\r\n    this.state = {\r\n      playing: false,\r\n      level: 0,\r\n      best: 0,\r\n      showModal: false\r\n    };\r\n    //initiate howl object (see https://howlerjs.com/docs for more info)\r\n    this._howl = new Howl({\r\n      // defining audio source\r\n      src: [\"simon-sound.mp3\"],\r\n      // defining sprites to be played\r\n      sprite: {\r\n        green: [0, 295],\r\n        red: [296, 297],\r\n        yellow: [595, 271],\r\n        blue: [866, 321]\r\n      },\r\n      // callback when audio finishes => emits _endplay value\r\n      onend: () => this._endPlay.next(),\r\n      // suscribing to subjects once audio file is loaded\r\n      onload: () => {\r\n        this._blinkGreen.pipe(throttleTime(500)).subscribe(isClick => {\r\n          this.blinkingColor = \"green\";\r\n          this.handleBlink(isClick);\r\n        });\r\n        this._blinkRed.pipe(throttleTime(500)).subscribe(isClick => {\r\n          this.blinkingColor = \"red\";\r\n          this.handleBlink(isClick);\r\n        });\r\n        this._blinkYellow.pipe(throttleTime(500)).subscribe(isClick => {\r\n          this.blinkingColor = \"yellow\";\r\n          this.handleBlink(isClick);\r\n        });\r\n        this._blinkBlue.pipe(throttleTime(500)).subscribe(isClick => {\r\n          this.blinkingColor = \"blue\";\r\n          this.handleBlink(isClick);\r\n        });\r\n        this._endPlay.subscribe(() => {\r\n          switch (this.blinkingColor) {\r\n            case \"green\":\r\n              this.toggleBlinking(\"green\");\r\n              break;\r\n            case \"red\":\r\n              this.toggleBlinking(\"red\");\r\n              break;\r\n            case \"blue\":\r\n              this.toggleBlinking(\"blue\");\r\n              break;\r\n            case \"yellow\":\r\n              this.toggleBlinking(\"yellow\");\r\n              break;\r\n            default:\r\n              break;\r\n          }\r\n          this.blinkingColor = null;\r\n        });\r\n      },\r\n      onloaderror: () => {\r\n        // TODO handle load error\r\n      }\r\n    });\r\n    //binding endGame callback for modal usage\r\n    this.endGame = this.endGame.bind(this);\r\n  }\r\n\r\n  /**\r\n   * @method handleBlink\r\n   * @param isClick indicates if user has clicked or if Simon emitted sound\r\n   */\r\n  handleBlink(isClick) {\r\n    this._howl.play(this.blinkingColor);\r\n    this.toggleBlinking(this.blinkingColor);\r\n    if (isClick) {\r\n      this.playSequence = [...this.playSequence, this.blinkingColor];\r\n    }\r\n  }\r\n  /**\r\n   * @method clickGreen\r\n   * fired when user clicks green tile\r\n   */\r\n  clickGreen() {\r\n    this._blinkGreen.next(true);\r\n  }\r\n  /**\r\n   * @method clickRed\r\n   * fired when user clicks red tile\r\n   */\r\n  clickRed() {\r\n    this._blinkRed.next(true);\r\n  }\r\n\r\n  /**\r\n   * @method clickYellow\r\n   * fired when user clicks yellow tile\r\n   */\r\n  clickYellow() {\r\n    this._blinkYellow.next(true);\r\n  }\r\n\r\n  /**\r\n   * @method clickBlue\r\n   * fired when user clicks blue tile\r\n   */\r\n  clickBlue() {\r\n    this._blinkBlue.next(true);\r\n  }\r\n\r\n  /**\r\n   * @method toggleBlinking\r\n   * toggle class 'blinking' to element to be blinked\r\n   */\r\n  toggleBlinking(name) {\r\n    document.getElementById(name).classList.toggle(\"blinking\");\r\n  }\r\n\r\n  /**\r\n   * @method startGame\r\n   * initiates game state when user clicks 'Start'\r\n   */\r\n  startGame() {\r\n    this._nextRound = new Subject();\r\n    this._nextRound.subscribe(level => {\r\n      this.playSequence = [];\r\n      this.computeSequence();\r\n      this.setState({\r\n        ...this.state,\r\n        playing: true,\r\n        level: level\r\n      });\r\n    });\r\n    this._nextRound.next(1);\r\n  }\r\n  /**\r\n   * @method resetGame\r\n   * resets game state when user clicks 'Reset'\r\n   */\r\n  resetGame() {\r\n    this.setState({\r\n      playing: false,\r\n      level: 0,\r\n      best: 0\r\n    });\r\n    // handle subscription\r\n    if (this._nextRound && !this._nextRound.isStopped) {\r\n      this._nextRound.unsubscribe();\r\n    }\r\n    this.sequence = [];\r\n    this.playSequence = [];\r\n  }\r\n  /**\r\n   * @method endGame\r\n   * sets game state when user closes end game modal\r\n   */\r\n  endGame() {\r\n    let best = this.state.best;\r\n    if (best < this.state.level) {\r\n      best = this.state.level;\r\n    }\r\n    this.setState({\r\n      playing: false,\r\n      level: 0,\r\n      best: best,\r\n      showModal: false\r\n    });\r\n    this._nextRound.unsubscribe();\r\n    this.sequence = [];\r\n    this.playSequence = [];\r\n  }\r\n\r\n  /**\r\n   * @method computeSequence\r\n   * computes a color to be played and adds it to the sequence\r\n   */\r\n  computeSequence() {\r\n    let newColor = \"\";\r\n    switch (Math.floor(Math.random() * Math.floor(4))) {\r\n      case 0:\r\n        newColor = \"green\";\r\n        break;\r\n      case 1:\r\n        newColor = \"red\";\r\n        break;\r\n      case 2:\r\n        newColor = \"yellow\";\r\n        break;\r\n      case 3:\r\n        newColor = \"blue\";\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n    console.log(\"newColor :\", newColor);\r\n    this.sequence = [...this._sequence, newColor];\r\n  }\r\n  /**\r\n   * @method openModal\r\n   * opens modal end game window\r\n   */\r\n  openModal() {\r\n    this.setState({ showModal: true });\r\n  }\r\n  /**\r\n   * @method render\r\n   * renders Simon game.\r\n   */\r\n  render() {\r\n    return (\r\n      <div id=\"simon-wrapper\">\r\n        <div\r\n          id=\"frame\"\r\n          className=\"d-flex flex-column justify-content-center align-items-center\"\r\n        >\r\n          <div\r\n            id=\"upper\"\r\n            className=\"d-inline-flex justify-content center align-items-stretch\"\r\n          >\r\n            <div id=\"green\" className=\"m-1\" onClick={() => this.clickGreen()} />\r\n            <div id=\"red\" className=\"m-1\" onClick={() => this.clickRed()} />\r\n          </div>\r\n          <div\r\n            id=\"lower\"\r\n            className=\"d-inline-flex justify-content center align-items-stretch\"\r\n          >\r\n            <div\r\n              id=\"yellow\"\r\n              className=\"m-1\"\r\n              onClick={() => this.clickYellow()}\r\n            />\r\n            <div id=\"blue\" className=\"m-1\" onClick={() => this.clickBlue()} />\r\n          </div>\r\n        </div>\r\n        <div\r\n          id=\"center\"\r\n          className=\"p-1 d-flex flex-column justify-content-around align-items-center\"\r\n        >\r\n          <div className=\"label d-flex justify-content-space-between align-items-center\">\r\n            <span>Round :</span>\r\n            <div className=\"digital-counter\">{\"\" + this.state.level}</div>\r\n          </div>\r\n          <div className=\"label d-flex justify-content-space-between align-items-center\">\r\n            <span>Best :</span>\r\n            <div className=\"digital-counter\">{this.state.best}</div>\r\n          </div>\r\n          <div className=\"d-flex justify-content-center align-items-center\">\r\n            <button className=\"button mr-1\" onClick={() => this.resetGame()}>\r\n              Reset\r\n            </button>\r\n            <button\r\n              className=\"button\"\r\n              onClick={() => this.startGame()}\r\n              disabled={this.state.playing}\r\n            >\r\n              Start\r\n            </button>\r\n          </div>\r\n        </div>\r\n        <Modal\r\n          ariaHideApp={false}\r\n          isOpen={this.state.showModal}\r\n          onAfterOpen={this.afterOpenModal}\r\n          onRequestClose={this.closeModal}\r\n          style={this.modalStyles}\r\n          contentLabel=\"Example Modal\"\r\n        >\r\n          <h2>Fin de partie</h2>\r\n          <p>\r\n            Vous avez réussi à suivre la séquence de Simon {this.state.level}{\" \"}\r\n            fois d'affilée.\r\n          </p>\r\n          <button className=\"btn btn-primary\" onClick={this.endGame}>\r\n            Fermer\r\n          </button>\r\n        </Modal>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import \"./App.css\";\nimport React from \"react\";\nimport logoMini from \"./logo-mini.svg\";\nimport headerLogo from \"./logo.png\";\nimport SimonGame from \"./Simon\";\nfunction App() {\n  return (\n    <div className=\"App h-100 d-flex flex-column justify-content-between align-items-center text-center\">\n      <Header />\n      <SimonInstructions />\n      <SimonGame />\n      <Footer />\n    </div>\n  );\n}\n\nfunction Header() {\n  return (\n    <header>\n      <a\n        className=\"ribbon\"\n        target=\"_blank\"\n        rel=\"noopener noreferrer\"\n        href=\"https://github.com/aurelienvernay/angular-simon-game\"\n      >\n        <img\n          width=\"149\"\n          height=\"149\"\n          src=\"https://github.blog/wp-content/uploads/2008/12/forkme_right_darkblue_121621.png?resize=149%2C149\"\n          className=\"attachment-full size-full\"\n          alt=\"Fork me on GitHub\"\n          data-recalc-dims=\"1\"\n        />\n      </a>\n      <a href=\"http://aurelien-vernay-solutions.com\">\n        <img\n          src={headerLogo}\n          alt=\"Aurélien Vernay Solutions\"\n          style={{ maxWidth: \"100%\", maxHeight: \"250px\", margin: \"0 auto\" }}\n        />\n      </a>\n      <h1>React Simon Game</h1>\n    </header>\n  );\n}\n\nfunction Footer() {\n  return (\n    <div className=\"footer text-muted\">\n      <p>\n        Cette application a été réalisée avec le framework &nbsp;\n        <a\n          href=\"https://reactjs.org/\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          React\n        </a>\n        , ainsi que la bibliotèque de programmation réactive{\" \"}\n        <a\n          href=\"https://github.com/ReactiveX/rxjs\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Rxjs\n        </a>\n        , la bibliothèque audio{\" \"}\n        <a\n          href=\"https://howlerjs.com/\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Howler.js\n        </a>{\" \"}\n        et la bibliothèque UI{\" \"}\n        <a\n          href=\"https://getbootstrap.com/\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Bootstrap\n        </a>\n        .\n      </p>\n      <p>\n        <img src={logoMini} alt=\"Aurélien Vernay Solutions\" height=\"32\" />\n        2019 - Fait par Aurélien VERNAY (visitez mon{\" \"}\n        <a href=\"https://aurelienvernay.github.io\">site web</a> pour en savoir\n        plus)\n      </p>\n    </div>\n  );\n}\nfunction SimonInstructions() {\n  return (\n    <section>\n      <h2>Instructions</h2>\n      <p>\n        Appuyez sur <em>Start</em> pour commencer la partie. Observez la\n        séquence de couleurs programmée par Simon, et ne vous trompez pas !\n      </p>\n      <p>\n        Utilisez le bouton Reset pour recommencer la partie à 0. Attention :\n        cela effacera votre record !\n      </p>\n    </section>\n  );\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}